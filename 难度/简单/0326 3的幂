# 题目地址：
https://leetcode-cn.com/problems/power-of-three/
## 代码：
### 1.暴力递归：
```C++
class Solution {
public:
    bool isPowerOfThree(int n) {
        if(n==1 or n==3 or n==9) return true;
        if(n%3!=0||n==0) return false;
        return isPowerOfThree(n/3);
    }
};
```
#### 思路：
边界条件竟然没考虑。。0的时候，1的时候，2的时候，我当时在想什么。。。。这么弱智的题都没做对
#### 复杂度分析：
- 时间复杂度: O(logn)
- 空间复杂度: O(logn)
#### 优化：
```C++
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int len=nums.size();
        for(int i=0;i<len-1;i++) for(int j=i+1;j<len;j++)
        {
            if(nums[i]+nums[j] == target)
            return {i,j};
        }
       return {};
    }
};
```
### 2.求余法：
```C++
class Solution {
public:
    bool isPowerOfThree(int n) {
        if(n<=0) return false;
        if(((int)pow(3,19))%n==0) return true;
        return false;
    }
};
```
#### 思路：
找到int最大的数，如果余数为0，那么给定的值符合要求，需要注意负数肯定不是
#### 复杂度分析：
- 时间复杂度: O(1)
- 空间复杂度: O(1)


## 总结：
1、他妈的注意边界条件啊，没有调试记录就不会考虑问题了

